---
# - name: configure fortigate
- hosts: 172.28.164.162
  gather_facts: yes
  collections:
    - fortinet.fortios
  vars:
    fortigate_user: admin     # FortiGate username
    fortigate_password: "{{ fortigate_password }}" # FortiGate password
    firewall_policy_1: "{{ firewall_policy_1 }}"
    firewall_policy_2: "{{ firewall_policy_2 }}"
      
  # -o Ciphers=aes256-gcm@openssh.com
  # vars:
    access_token: "GbkpGb53Gbd4Qrn1z7w8rg08t46csn" # token to execute config in Fortigate API
    subnet: "192.168.1.0/24" # subnet to create address

  tasks:

    # - name: Debug SSH connection output
    #   debug:
    #     var: ssh_test_output

    # - name: test ssh
    #   command: "show"  
    #   delegate_to: fortigate
    #   ignore_errors: true
    #   # vars:
    #   #   ansible_user: "{{fortigate_user}}"
    #   #   ansible_password: "{{fortigate_password}}"
    #   #   ansible_ssh_common_args: "-o ControlMaster=no -vvv -o Ciphers=aes256"
    #   tags: test_ssh

################### Create new address to use in policy ####################
    - name: Add source address
      fortinet.fortios.fortios_firewall_address:
        access_token: "{{ token_fortigate }}"
        state: "present"
        firewall_address:
          name: "example_address"  # Name of the address object
          type: "ipmask"  # Address type (e.g., "ipmask" for subnet)
          subnet: "{{ subnet }}"  # IPv4 subnet in CIDR notation
          comment: "Example IPv4 address"  # Optional description
      ignore_errors: true
      delegate_to: fortigate

################### Create policy with ALLOW ALL to test communication #############
    - name: Configure IPv4/IPv6 policy Allow to test.
      fortinet.fortios.fortios_firewall_policy:
          vdom: "root"
          state: "present"
          access_token: "{{ access_token }}"
          firewall_policy:
              policyid: "0"
              name: "Test Policy"
              action: "accept"
              srcintf:
                - name: "port1"
              dstintf:
                - name: "port2"
              srcaddr:
                - name: "example_address"
              dstaddr:
                - name: "all"
              service:
                - name: "ALL"
              schedule: "always"
              logtraffic: "all"
      register: firewall_policy_1
      ignore_errors: true
      delegate_to: fortigate

    - name: debug ipv4 policy 
      debug: 
        msg: "{{ firewall_policy_1 }}"

###################### Create a policy to allow just ICMP ######################
    - name: Configure IPv4/IPv6 policy to Allow ICMP
      fortinet.fortios.fortios_firewall_policy:
          vdom: "root"
          state: "present"
          access_token: "{{ token_fortigate }}"
          firewall_policy:
              policyid: 10
              name: "Test Policy Overwrite"
              action: "accept"
              srcintf:
                - name: "port1"
              dstintf:
                - name: "port2"
              srcaddr:
                - name: "example_address_2"
              dstaddr:
                - name: "all"
              service:
                - name: "ALL_ICMP"
              schedule: "always"
              logtraffic: "all"
      register: firewall_policy_2
      ignore_errors: true
      delegate_to: fortigate
    
    - name: debug ipv4 policy 
      debug: 
        msg: "{{ firewall_policy_2 }}"

################ Create custom service to add new service to use in policy #########
    - name: Add custom service
      fortinet.fortios.fortios_firewall_service_custom:
        access_token: "{{ token_fortigate }}"
        vdom: "root"
        state: "present"
        firewall_service_custom:
          name: "example_custom_svc"
          protocol: "TCP/UDP/UDP-Lite/SCTP"
          tcp_portrange: "8080-8081"
          udp_portrange: "8080-8081"
          comment: "Custom service for specific port ranges"
      delegate_to: fortigate
      ignore_errors: true

